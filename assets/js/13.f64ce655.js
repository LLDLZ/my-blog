(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{431:function(t,a,e){"use strict";e.r(a);var _=e(2),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dotnet-面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dotnet-面试题"}},[t._v("#")]),t._v(" dotnet 面试题")]),t._v(" "),a("h2",{attrs:{id:"_1-net-和-c-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-net-和-c-有什么区别"}},[t._v("#")]),t._v(" 1. .NET 和 C#有什么区别")]),t._v(" "),a("p",[t._v(".NET 一般指 .NET FrameWork 框架，它是一种平台，一种技术。")]),t._v(" "),a("h2",{attrs:{id:"_2-c-中的委托是什么-事件是不是一种委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-中的委托是什么-事件是不是一种委托"}},[t._v("#")]),t._v(" 2. C#中的委托是什么？事件是不是一种委托？")]),t._v(" "),a("ul",[a("li",[t._v("委托可以把一个方法作为参数代入另一个方法。")]),t._v(" "),a("li",[t._v("委托可以理解为指向一个函数的引用。")]),t._v(" "),a("li",[t._v("是，是一种特殊的委托")])]),t._v(" "),a("h2",{attrs:{id:"_3-简述-private、-protected、-public、internal-修饰符的访问权限。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-简述-private、-protected、-public、internal-修饰符的访问权限。"}},[t._v("#")]),t._v(" 3. 简述 private、 protected、 public、internal 修饰符的访问权限。")]),t._v(" "),a("ul",[a("li",[t._v("private: 私有成员, 在类的内部才可以访问。")]),t._v(" "),a("li",[t._v("protected: 保护成员，该类内部和继承类中可以访问。")]),t._v(" "),a("li",[t._v("public: 公共成员，完全公开，没有访问限制。")]),t._v(" "),a("li",[t._v("internal:在同一命名空间内可以访问。")])]),t._v(" "),a("h2",{attrs:{id:"_4-override-与重载的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-override-与重载的区别"}},[t._v("#")]),t._v(" 4. override 与重载的区别")]),t._v(" "),a("ul",[a("li",[t._v("override 与重载的区别。重载是方法的名称相同。参数或参数类型不同，进行多次重载以适应不同的需要")]),t._v(" "),a("li",[t._v("Override 是进行基类中函数的重写。为了适应需要。")])]),t._v(" "),a("h2",{attrs:{id:"_5-cts、cls、clr-分别作何解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-cts、cls、clr-分别作何解释"}},[t._v("#")]),t._v(" 5. CTS、CLS、CLR 分别作何解释？")]),t._v(" "),a("ul",[a("li",[t._v("CTS: 通用语言系统。")]),t._v(" "),a("li",[t._v("CLS: 通用语言规范。")]),t._v(" "),a("li",[t._v("CLR: 公共语言运行库。")])]),t._v(" "),a("h2",{attrs:{id:"_6-什么是装箱和拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是装箱和拆箱"}},[t._v("#")]),t._v(" 6. 什么是装箱和拆箱？")]),t._v(" "),a("ul",[a("li",[t._v("从值类型接口转换到引用类型装箱。")]),t._v(" "),a("li",[t._v("从引用类型转换到值类型拆箱。")])]),t._v(" "),a("h2",{attrs:{id:"_7-什么是受管制的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是受管制的代码"}},[t._v("#")]),t._v(" 7. 什么是受管制的代码？")]),t._v(" "),a("p",[t._v("unsafe：非托管代码。不经过 CLR 运行。")]),t._v(" "),a("h2",{attrs:{id:"_8-什么是强类型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是强类型系统"}},[t._v("#")]),t._v(" 8. 什么是强类型系统？")]),t._v(" "),a("p",[t._v("RTTI：类型识别系统。")]),t._v(" "),a("h2",{attrs:{id:"_9-net-中读写数据库需要用到那些类-他们的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-net-中读写数据库需要用到那些类-他们的作用"}},[t._v("#")]),t._v(" 9. net 中读写数据库需要用到那些类？他们的作用？")]),t._v(" "),a("ul",[a("li",[t._v("DataSet:数据存储器。")]),t._v(" "),a("li",[t._v("DataCommand:执行语句命令。")]),t._v(" "),a("li",[t._v("DataAdapter:数据的集合，用语填充。")])]),t._v(" "),a("h2",{attrs:{id:"_10-列举-asp-net-页面之间传递值的几种方式。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-列举-asp-net-页面之间传递值的几种方式。"}},[t._v("#")]),t._v(" 10. 列举 ASP.NET 页面之间传递值的几种方式。")]),t._v(" "),a("ul",[a("li",[t._v("使用 QueryString, 如....?id=1;")]),t._v(" "),a("li",[t._v("使用 Session 变量")]),t._v(" "),a("li",[t._v("使用 Server.Transfer")])]),t._v(" "),a("h2",{attrs:{id:"_11-在-net-中-配件的意思是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-在-net-中-配件的意思是"}},[t._v("#")]),t._v(" 11. 在.net 中，配件的意思是？")]),t._v(" "),a("p",[t._v("程序集。（中间语言，源数据，资源，装配清单）")]),t._v(" "),a("h2",{attrs:{id:"_12-常用的调用-webservice-的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-常用的调用-webservice-的方法有哪些"}},[t._v("#")]),t._v(" 12. 常用的调用 WebService 的方法有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("使用 WSDL.exe 命令行工具。")]),t._v(" "),a("li",[t._v("使用 VS.NET 中的 Add Web Reference 菜单选项")])]),t._v(" "),a("h2",{attrs:{id:"_13-netremoting-的工作原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-netremoting-的工作原理是什么"}},[t._v("#")]),t._v(" 13. .netRemoting 的工作原理是什么？")]),t._v(" "),a("p",[t._v("服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置")]),t._v(" "),a("h2",{attrs:{id:"_14-在-c-中-string-str-null-与-string-str-请尽量使用文字或图象说明其中的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-在-c-中-string-str-null-与-string-str-请尽量使用文字或图象说明其中的区别。"}},[t._v("#")]),t._v(" 14. 在 C＃中，string str = null 与 string str = “” 请尽量使用文字或图象说明其中的区别。")]),t._v(" "),a("p",[t._v('string str = null 是不给他分配内存空间,而 string str = "" 给它分配长度为空字符串的内存空间。')]),t._v(" "),a("h2",{attrs:{id:"_15-请详述在-dotnet-中类-class-与结构-struct-的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-请详述在-dotnet-中类-class-与结构-struct-的异同"}},[t._v("#")]),t._v(" 15. 请详述在 dotnet 中类(class)与结构(struct)的异同？")]),t._v(" "),a("ul",[a("li",[t._v("Class 可以被实例化,属于引用类型,是分配在内存的堆上的")]),t._v(" "),a("li",[t._v("Struct 属于值类型,是分配在内存的栈上的.")])]),t._v(" "),a("h2",{attrs:{id:"_16-简要谈一下您对微软-net-构架下-remoting-和-webservice-两项技术的理解以及实际中的应用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-简要谈一下您对微软-net-构架下-remoting-和-webservice-两项技术的理解以及实际中的应用。"}},[t._v("#")]),t._v(" 16. 简要谈一下您对微软.NET 构架下 remoting 和 webservice 两项技术的理解以及实际中的应用。")]),t._v(" "),a("ul",[a("li",[t._v("WS 主要是可利用 HTTP，穿透防火墙。")]),t._v(" "),a("li",[t._v("Remoting 可以利用 TCP/IP，二进制传送提高效率。")])]),t._v(" "),a("h2",{attrs:{id:"_17-面向对象的语言具有-性、-性、-性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-面向对象的语言具有-性、-性、-性"}},[t._v("#")]),t._v(" 17. 面向对象的语言具有**____"),a("strong",[t._v("性、*")]),t._v("*_**"),a("strong",[t._v("性、")]),t._v("____**性")]),t._v(" "),a("p",[t._v("封装、继承、多态。")]),t._v(" "),a("h2",{attrs:{id:"_18-能用-foreach-遍历访问的对象需要实现-接口或声明-方法的类型。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-能用-foreach-遍历访问的对象需要实现-接口或声明-方法的类型。"}},[t._v("#")]),t._v(" 18. 能用 foreach 遍历访问的对象需要实现 "),a("strong",[t._v("**")]),t._v("____"),a("strong",[t._v("**"),a("strong",[t._v("接口或声明")]),t._v("**")]),t._v("____******方法的类型。")]),t._v(" "),a("p",[t._v("IEnumerable 、 GetEnumerator。")]),t._v(" "),a("h2",{attrs:{id:"_19-gc-是什么-为什么要有-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-gc-是什么-为什么要有-gc"}},[t._v("#")]),t._v(" 19. GC 是什么? 为什么要有 GC?")]),t._v(" "),a("p",[t._v("GC 是垃圾收集器。程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：")]),t._v(" "),a("ul",[a("li",[t._v("System.gc()")]),t._v(" "),a("li",[t._v("Runtime.getRuntime().gc()")])]),t._v(" "),a("h2",{attrs:{id:"_20-strings-new-string-xyz-创建了几个-string-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-strings-new-string-xyz-创建了几个-string-object"}},[t._v("#")]),t._v(' 20. Strings = new String("xyz");创建了几个 String Object?')]),t._v(" "),a("p",[t._v("两个对象，一个是“xyx”,一个是指向“xyx”的引用对象 s。")]),t._v(" "),a("h2",{attrs:{id:"_21-启动一个线程是用-run-还是-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-启动一个线程是用-run-还是-start"}},[t._v("#")]),t._v(" 21. 启动一个线程是用 run()还是 start()?")]),t._v(" "),a("ul",[a("li",[t._v("启动一个线程是调用 start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由 JVM 调度并执行。这并不意味着线程就会立即运行。")]),t._v(" "),a("li",[t._v("run()方法可以产生必须退出的标志来停止一个线程。")])]),t._v(" "),a("h2",{attrs:{id:"_22-接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承实体类-concrete-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承实体类-concrete-class"}},[t._v("#")]),t._v(" 22. 接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?")]),t._v(" "),a("ul",[a("li",[t._v("接口可以继承接口")]),t._v(" "),a("li",[t._v("抽象类可以实现(implements)接口")]),t._v(" "),a("li",[t._v("抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。")])]),t._v(" "),a("h2",{attrs:{id:"_23-构造器-constructor-是否可被-override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-构造器-constructor-是否可被-override"}},[t._v("#")]),t._v(" 23. 构造器 Constructor 是否可被 override?")]),t._v(" "),a("ul",[a("li",[t._v("构造器 Constructor 不能被继承，因此不能重写 Overriding，但可以被重载 Overloading。")])]),t._v(" "),a("h2",{attrs:{id:"_24-是否可以继承-string-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-是否可以继承-string-类"}},[t._v("#")]),t._v(" 24. 是否可以继承 String 类?")]),t._v(" "),a("p",[t._v("String 类是 final 类故不可以继承。")]),t._v(" "),a("h2",{attrs:{id:"_25-try-里有一个-return-语句-那么紧跟在这个-try-后的-finally-里的-code-会不会被执行-什么时候被执行-在-return-前还是后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-try-里有一个-return-语句-那么紧跟在这个-try-后的-finally-里的-code-会不会被执行-什么时候被执行-在-return-前还是后"}},[t._v("#")]),t._v(" 25. try{}里有一个 return 语句，那么紧跟在这个 try 后的 finally {}里的 code 会不会被执行，什么时候被执行，在 return 前还是后?")]),t._v(" "),a("p",[t._v("会执行，在 return 前执行。")]),t._v(" "),a("h2",{attrs:{id:"_26-两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-两个对象值相同-x-equals-y-true-但却可有不同的-hash-code-这句话对不对"}},[t._v("#")]),t._v(" 26. 两个对象值相同(x.equals(y)== true)，但却可有不同的 hash code，这句话对不对?")]),t._v(" "),a("p",[t._v("不对，有相同的 hash code。")]),t._v(" "),a("h2",{attrs:{id:"_27-swtich-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-swtich-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上"}},[t._v("#")]),t._v(" 27. swtich 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上?")]),t._v(" "),a("p",[t._v("switch（expr1）中，expr1 是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。long,string 都不能作用于 swtich。")]),t._v(" "),a("h2",{attrs:{id:"_28-当一个线程进入一个对象的一个-synchronized-方法后-其它线程是否可进入此对象的其它方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-当一个线程进入一个对象的一个-synchronized-方法后-其它线程是否可进入此对象的其它方法"}},[t._v("#")]),t._v(" 28. 当一个线程进入一个对象的一个 synchronized 方法后，其它线程是否可进入此对象的其它方法?")]),t._v(" "),a("p",[t._v("不能，一个对象的一个 synchronized 方法只能由一个线程访问。")]),t._v(" "),a("h2",{attrs:{id:"_29-abstract-的-method-是否可同时是-static-是否可同时是-native-是否可同时是-synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-abstract-的-method-是否可同时是-static-是否可同时是-native-是否可同时是-synchronized"}},[t._v("#")]),t._v(" 29. abstract 的 method 是否可同时是 static,是否可同时是 native，是否可同时是 synchronized?")]),t._v(" "),a("p",[t._v("都不能。")]),t._v(" "),a("h2",{attrs:{id:"_30-list-set-map-是否继承自-collection-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-list-set-map-是否继承自-collection-接口"}},[t._v("#")]),t._v(" 30. List,Set, Map 是否继承自 Collection 接口?")]),t._v(" "),a("p",[t._v("List，Set 是 Map 不是")]),t._v(" "),a("h2",{attrs:{id:"_31-set-里的元素是不能重复的-那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-set-里的元素是不能重复的-那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别"}},[t._v("#")]),t._v(" 31. Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是 equals()?它们有何区别?")]),t._v(" "),a("ul",[a("li",[t._v("Set 里的元素是不能重复的，那么用 iterator()方法来区分重复与否。")]),t._v(" "),a("li",[t._v("equals()是判读两个 Set 是否相等。")]),t._v(" "),a("li",[t._v("equals()和==方法决定引用值是否指向同一对象 equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。")])]),t._v(" "),a("h2",{attrs:{id:"_32-数组有没有-length-这个方法-string-有没有-length-这个方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-数组有没有-length-这个方法-string-有没有-length-这个方法"}},[t._v("#")]),t._v(" 32. 数组有没有 length()这个方法? String 有没有 length()这个方法？")]),t._v(" "),a("p",[t._v("数组没有 length()这个方法，有 length 的属性。String 有有 length()这个方法。")]),t._v(" "),a("h2",{attrs:{id:"_33-sleep-和-wait-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-sleep-和-wait-有什么区别"}},[t._v("#")]),t._v(" 33. sleep()和 wait() 有什么区别?")]),t._v(" "),a("p",[t._v("sleep()方法是使线程停止一段时间的方法。在 sleep 时间间隔期满后，线程不一定立即恢复执行。这是因为在那个时刻，其它线程可能正在运行而且没有被调度为放弃执行，除非")]),t._v(" "),a("ul",[a("li",[t._v("“醒来”的线程具有更高的优先级")]),t._v(" "),a("li",[t._v("正在运行的线程因为其它原因而阻塞。\nwait()是线程交互时，如果线程对一个同步对象 x 发出一个 wait()调用，该线程会暂停执行，被调对象进入等待状态，直到被唤醒或等待时间到。")])]),t._v(" "),a("h2",{attrs:{id:"_34-谈谈-final-finally-finalize-的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-谈谈-final-finally-finalize-的区别。"}},[t._v("#")]),t._v(" 34. 谈谈 final,finally, finalize 的区别。")]),t._v(" "),a("ul",[a("li",[t._v("final—修饰符（关键字）如果一个类被声明为 final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract 的，又被声明为 final 的。将变量或方法声明为 final，可以保证它们在使用中 不被改变。被声明为 final 的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为 final 的方法也同样只能使用，不能重载 finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会 执行，然后控制就会进入 finally 块（如果有的话）。")]),t._v(" "),a("li",[t._v("finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的 ，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。")])]),t._v(" "),a("h2",{attrs:{id:"_35-如何处理几十万条并发数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-如何处理几十万条并发数据"}},[t._v("#")]),t._v(" 35. 如何处理几十万条并发数据？")]),t._v(" "),a("p",[t._v("用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方式这种方法并发的时候是不会有重复主键的.取得最大标识要有一个存储过程来获取.")]),t._v(" "),a("h2",{attrs:{id:"_36-session-有什么重大-bug-微软提出了什么方法加以解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-session-有什么重大-bug-微软提出了什么方法加以解决"}},[t._v("#")]),t._v(" 36. Session 有什么重大 BUG，微软提出了什么方法加以解决？")]),t._v(" "),a("p",[t._v("是 iis 中由于有进程回收机制，系统繁忙的话 Session 会丢失，可以用 Sateserver 或 SQL Server 数据库的方式存储 Session 不过这种方式比较慢，而且无法捕获 Session 的 END 事件。")]),t._v(" "),a("h2",{attrs:{id:"_37-进程和线程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-进程和线程的区别"}},[t._v("#")]),t._v(" 37. 进程和线程的区别？")]),t._v(" "),a("p",[t._v("进程是系统进行资源分配和调度的单位；线程是 CPU 调度和分派的单位，一个进程可以有多个线程，这些线程共享这个进程的资源。")]),t._v(" "),a("h2",{attrs:{id:"_38-堆和栈的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-堆和栈的区别"}},[t._v("#")]),t._v(" 38. 堆和栈的区别？")]),t._v(" "),a("ul",[a("li",[t._v("栈：由编译器自动分配、释放。在函数体中定义的变量通常在栈上。")]),t._v(" "),a("li",[t._v("堆：一般由程序员分配释放。用 new、malloc 等分配内存函数分配得到的就是在堆上。")])]),t._v(" "),a("h2",{attrs:{id:"_39-成员变量和成员函数前加-static-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-成员变量和成员函数前加-static-的作用"}},[t._v("#")]),t._v(" 39. 成员变量和成员函数前加 static 的作用？")]),t._v(" "),a("p",[t._v("它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数。分别用来反映类的状态。比如类成员变量可以用来统计类实例的数量，类成员函数\n负责这种统计的动作。")]),t._v(" "),a("h2",{attrs:{id:"_40-asp-net-与-asp-相比-主要有哪些进步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-asp-net-与-asp-相比-主要有哪些进步"}},[t._v("#")]),t._v(" 40. ASP.NET 与 ASP 相比，主要有哪些进步？")]),t._v(" "),a("p",[t._v("asp 解释形，aspx 编译型，性能提高，有利于保护源码。")]),t._v(" "),a("h2",{attrs:{id:"_41-请说明在-net-中常用的几种页面间传递参数的方法-并说出他们的优缺点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-请说明在-net-中常用的几种页面间传递参数的方法-并说出他们的优缺点。"}},[t._v("#")]),t._v(" 41. 请说明在.net 中常用的几种页面间传递参数的方法，并说出他们的优缺点。")]),t._v(" "),a("ul",[a("li",[t._v("session(viewstate) 简单，但易丢失")]),t._v(" "),a("li",[t._v("application 全局")]),t._v(" "),a("li",[t._v("cookie 简单，但可能不支持，可能被伪造")]),t._v(" "),a("li",[t._v('inputttype="hidden" 简单，可能被伪造')]),t._v(" "),a("li",[t._v("url 参数 简单，显示于地址栏，长度有限")]),t._v(" "),a("li",[t._v("数据库 稳定，安全，但性能相对弱")])]),t._v(" "),a("h2",{attrs:{id:"_42-请指出-gac-的含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-请指出-gac-的含义"}},[t._v("#")]),t._v(" 42. 请指出 GAC 的含义？")]),t._v(" "),a("p",[t._v("全局程序集缓存。")]),t._v(" "),a("h2",{attrs:{id:"_43-向服务器发送请求有几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-向服务器发送请求有几种方式"}},[t._v("#")]),t._v(" 43. 向服务器发送请求有几种方式？")]),t._v(" "),a("p",[t._v("get,post。get 一般为链接方式，post 一般为按钮方式。")]),t._v(" "),a("h2",{attrs:{id:"_44-datareader-与-dataset-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-datareader-与-dataset-有什么区别"}},[t._v("#")]),t._v(" 44. DataReader 与 Dataset 有什么区别？")]),t._v(" "),a("p",[t._v("一个是只能向前的只读游标，一个是内存中虚拟的数据库。")]),t._v(" "),a("h2",{attrs:{id:"_45-软件开发过程一般有几个阶段-每个阶段的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-软件开发过程一般有几个阶段-每个阶段的作用"}},[t._v("#")]),t._v(" 45. 软件开发过程一般有几个阶段？每个阶段的作用？")]),t._v(" "),a("p",[t._v("需求分析，架构设计，代码编写，QA，部署")]),t._v(" "),a("h2",{attrs:{id:"_46-在-c-中-using-和-new-这两个关键字有什么意义-请写出你所知道的意义-using-指令-和语句-new-创建实例-new-隐藏基类中方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-在-c-中-using-和-new-这两个关键字有什么意义-请写出你所知道的意义-using-指令-和语句-new-创建实例-new-隐藏基类中方法。"}},[t._v("#")]),t._v(" 46. 在 c#中 using 和 new 这两个关键字有什么意义，请写出你所知道的意义？using 指令 和语句 new 创建实例 new 隐藏基类中方法。")]),t._v(" "),a("ul",[a("li",[t._v("using 引入名称空间或者使用非托管资源")]),t._v(" "),a("li",[t._v("new 新建实例或者隐藏父类方法")])]),t._v(" "),a("h2",{attrs:{id:"_47-什么叫做-sql-注入-如何防止-请举例说明。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-什么叫做-sql-注入-如何防止-请举例说明。"}},[t._v("#")]),t._v(" 47. 什么叫做 SQL 注入，如何防止？请举例说明。")]),t._v(" "),a("p",[t._v("利用 sql 关键字对网站进行攻击。过滤关键字等")]),t._v(" "),a("h2",{attrs:{id:"_48-什么是反射-reflection-在-net-中如何使用反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-什么是反射-reflection-在-net-中如何使用反射"}},[t._v("#")]),t._v(" 48. 什么是反射（Reflection）？在.NET 中如何使用反射？")]),t._v(" "),a("ul",[a("li",[t._v("反射是一种在运行时动态地获取和操作类型信息的机制。")]),t._v(" "),a("li",[t._v("在.NET 中，可以使用反射来检查和实例化类型、调用类型的成员（属性、方法等）以及获取和设置成员的值。通过反射，开发人员可以在运行时动态地操作和扩展类型。")])]),t._v(" "),a("h2",{attrs:{id:"_49-用-singleton-如何写设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-用-singleton-如何写设计模式"}},[t._v("#")]),t._v(" 49. 用 Singleton 如何写设计模式")]),t._v(" "),a("p",[t._v("static 属性里面 new ,构造函数 private")]),t._v(" "),a("h2",{attrs:{id:"_50-什么是-applicationpool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-什么是-applicationpool"}},[t._v("#")]),t._v(" 50. 什么是 ApplicationPool？")]),t._v(" "),a("p",[t._v("Web 应用，类似 Thread Pool，提高并发性能。")]),t._v(" "),a("h2",{attrs:{id:"_60-什么是虚函数-什么是抽象函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60-什么是虚函数-什么是抽象函数"}},[t._v("#")]),t._v(" 60. 什么是虚函数？什么是抽象函数？")]),t._v(" "),a("ul",[a("li",[t._v("虚函数：没有实现的，可由子类继承并重写的函数。")]),t._v(" "),a("li",[t._v("抽象函数：规定其非虚子类必须实现的函数，必须被重写。")])]),t._v(" "),a("h2",{attrs:{id:"_61-什么是-xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61-什么是-xml"}},[t._v("#")]),t._v(" 61. 什么是 XML？")]),t._v(" "),a("p",[t._v("XML 即可扩展标记语言。eXtensible Markup Language.标记是指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，即可以选择国际通用的标记语言，比如 HTML，也可以使用象 XML 这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML 是从 SGML 中简化修改出来的。它主要用到的有 XML、XSL 和 XPath 等。")]),t._v(" "),a("h2",{attrs:{id:"_62-什么是-webservice-uddi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_62-什么是-webservice-uddi"}},[t._v("#")]),t._v(" 62. 什么是 WebService？UDDI？")]),t._v(" "),a("p",[t._v("Web Service 便是基于网络的、分布式的模块化组件，它执行特定的任务，遵守具体的技术规范，这些规范使得 Web Service 能与其他兼容的组件进行互操作。UDDI 的目的是为电子商务建立标准；UDDI 是一套基于 Web 的、分布式的、为 WebService 提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的 Web Service 注册，以使别的企业能够发现的访问协议的实现标准。")]),t._v(" "),a("h2",{attrs:{id:"_63-什么是-asp-net-中的用户控件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_63-什么是-asp-net-中的用户控件"}},[t._v("#")]),t._v(" 63. 什么是 ASP.net 中的用户控件？")]),t._v(" "),a("p",[t._v("用户控件一般用在内容多为静态,或者少许会改变的情况下..用的比较大..类似 ASP 中的 include..但是功能要强大的多。")]),t._v(" "),a("h2",{attrs:{id:"_64-列举一下你所了解的-xml-技术及其应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64-列举一下你所了解的-xml-技术及其应用"}},[t._v("#")]),t._v(" 64. 列举一下你所了解的 XML 技术及其应用")]),t._v(" "),a("p",[t._v("xml 用于配置,用于保存静态数据类型.接触 XML 最多的是 web Services 和 config")]),t._v(" "),a("h2",{attrs:{id:"_65-ado-net-中常用的对象有哪些-分别描述一下。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_65-ado-net-中常用的对象有哪些-分别描述一下。"}},[t._v("#")]),t._v(" 65. ADO.net 中常用的对象有哪些？分别描述一下。")]),t._v(" "),a("ul",[a("li",[t._v("Connection 数据库连接对象")]),t._v(" "),a("li",[t._v("Command 数据库命令")]),t._v(" "),a("li",[t._v("DataReader 数据读取器")]),t._v(" "),a("li",[t._v("DataSet 数据集")])]),t._v(" "),a("h2",{attrs:{id:"_66-什么是-soap-有哪些应用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_66-什么是-soap-有哪些应用。"}},[t._v("#")]),t._v(" 66. 什么是 SOAP,有哪些应用。")]),t._v(" "),a("p",[t._v("simple object access protocal,简单对象接受协议.以 xml 为基本编码结构,建立在已有通信协议上(如 http,不过据说 ms 在搞最底层的架构在 tcp/ip 上的 soap)的一种规范 WebService 使用的协议.")]),t._v(" "),a("h2",{attrs:{id:"_67-c-中-property-与-attribute-的区别-他们各有什么用处-这种机制的好处在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_67-c-中-property-与-attribute-的区别-他们各有什么用处-这种机制的好处在哪里"}},[t._v("#")]),t._v(" 67. C#中 property 与 attribute 的区别，他们各有什么用处，这种机制的好处在哪里？")]),t._v(" "),a("p",[t._v("一个是属性，用于存取类的字段，一个是特性，用来标识类，方法等的附加性质")]),t._v(" "),a("h2",{attrs:{id:"_68-xml-与-html-的主要区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_68-xml-与-html-的主要区别"}},[t._v("#")]),t._v(" 68. XML 与 HTML 的主要区别")]),t._v(" "),a("ul",[a("li",[t._v("XML 是区分大小写字母的，HTML 不区分。")]),t._v(" "),a("li",[t._v("在 HTML 中，如果上下文清楚地显示出段落或者列表键在何处结尾，那么你可以省略"),a("p"),t._v("或者")]),t._v("之类的结束标记。在 XML 中，绝对不能省略掉结束标记。"),t._v(" "),a("li",[t._v("在 XML 中，拥有单个标记而没有匹配的结束标记的元素必须用一个 / 字符作为结尾。这样分析器就知道不用查找结束标记了。")]),t._v(" "),a("li",[t._v("在 XML 中，属性值必须分装在引号中。在 HTML 中，引号是可用可不用的。")]),t._v(" "),a("li",[t._v("在 HTML 中，可以拥有不带值的属性名。在 XML 中，所有的属性都必须带有相应的值。")])]),t._v(" "),a("h2",{attrs:{id:"_69-c-中的三元运算符是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_69-c-中的三元运算符是"}},[t._v("#")]),t._v(" 69. c#中的三元运算符是？")]),t._v(" "),a("p",[t._v("？：")]),t._v(" "),a("h2",{attrs:{id:"_70-当整数-a-赋值给一个-object-对象时-整数-a-将会被"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_70-当整数-a-赋值给一个-object-对象时-整数-a-将会被"}},[t._v("#")]),t._v(" 70. 当整数 a 赋值给一个 object 对象时，整数 a 将会被？")]),t._v(" "),a("p",[t._v("装箱。")]),t._v(" "),a("h2",{attrs:{id:"_71-类成员有-种可访问形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_71-类成员有-种可访问形式"}},[t._v("#")]),t._v(" 71. 类成员有**_**种可访问形式？")]),t._v(" "),a("p",[t._v("this.;new Class().Method;")]),t._v(" "),a("h2",{attrs:{id:"_72-publicstatic-const-int-a-1-这段代码有错误么-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_72-publicstatic-const-int-a-1-这段代码有错误么-是什么"}},[t._v("#")]),t._v(" 72. publicstatic const int A=1;这段代码有错误么？是什么？")]),t._v(" "),a("p",[t._v("const 不能用 static 修饰。")]),t._v(" "),a("h2",{attrs:{id:"_73-委托声明的关键字是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_73-委托声明的关键字是"}},[t._v("#")]),t._v(" 73. 委托声明的关键字是**__**?")]),t._v(" "),a("p",[t._v("delegate.")]),t._v(" "),a("h2",{attrs:{id:"_74-用-sealed-修饰的类有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_74-用-sealed-修饰的类有什么特点"}},[t._v("#")]),t._v(" 74. 用 sealed 修饰的类有什么特点？")]),t._v(" "),a("p",[t._v("密封，不能继承。")]),t._v(" "),a("h2",{attrs:{id:"_75-在-asp-net-中所有的自定义用户控件都必须继承自"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_75-在-asp-net-中所有的自定义用户控件都必须继承自"}},[t._v("#")]),t._v(" 75. 在 Asp.net 中所有的自定义用户控件都必须继承自**____**?")]),t._v(" "),a("p",[t._v("Control。")]),t._v(" "),a("h2",{attrs:{id:"_76-在-net-中所有可序列化的类都被标记为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_76-在-net-中所有可序列化的类都被标记为"}},[t._v("#")]),t._v(" 76. 在.Net 中所有可序列化的类都被标记为**_**?")]),t._v(" "),a("p",[t._v("[serializable]")]),t._v(" "),a("h2",{attrs:{id:"_77-在-net-托管代码中我们不用担心内存漏洞-这是因为有了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_77-在-net-托管代码中我们不用担心内存漏洞-这是因为有了"}},[t._v("#")]),t._v(" 77. 在.Net 托管代码中我们不用担心内存漏洞，这是因为有了**__**?")]),t._v(" "),a("p",[t._v("GC。")]),t._v(" "),a("h2",{attrs:{id:"_78-当类-t-只声明了私有实例构造函数时-则在-t-的程序文本外部-可以-可以-or-不可以-从-t-派生出新的类-不可以-可以-or-不可以-直接创建-t-的任何实例。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_78-当类-t-只声明了私有实例构造函数时-则在-t-的程序文本外部-可以-可以-or-不可以-从-t-派生出新的类-不可以-可以-or-不可以-直接创建-t-的任何实例。"}},[t._v("#")]),t._v(" 78. 当类 T 只声明了私有实例构造函数时，则在 T 的程序文本外部，"),a("strong",[a("em",[t._v("可以")])]),t._v("（可以 or 不可以）从 T 派生出新的类，不可以____（可以 or 不可以）直接创建 T 的任何实例。")]),t._v(" "),a("p",[t._v("不可以，不可以。")]),t._v(" "),a("h2",{attrs:{id:"_79-在-net-中-类-system-web-ui-page-可以被继承么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_79-在-net-中-类-system-web-ui-page-可以被继承么"}},[t._v("#")]),t._v(" 79. 在.Net 中，类 System.Web.UI.Page 可以被继承么？")]),t._v(" "),a("p",[t._v("可以。")]),t._v(" "),a("h2",{attrs:{id:"_80-net-的错误处理机制是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_80-net-的错误处理机制是什么"}},[t._v("#")]),t._v(" 80. .net 的错误处理机制是什么？")]),t._v(" "),a("p",[t._v(".net 错误处理机制采用 try->catch->finally 结构，发生错误时，层层上抛，直到找到匹配的 Catch 为止。")]),t._v(" "),a("h2",{attrs:{id:"_81-利用-operator-声明且仅声明了-有什么错误么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_81-利用-operator-声明且仅声明了-有什么错误么"}},[t._v("#")]),t._v(" 81. 利用 operator 声明且仅声明了==，有什么错误么?")]),t._v(" "),a("p",[t._v('要同时修改 Equale 和 GetHash() ? 重载了"==" 就必须重载 "!="')]),t._v(" "),a("h2",{attrs:{id:"_82-在-net-c-or-vb-net-中-appplication-exit-还是-form-close-有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_82-在-net-c-or-vb-net-中-appplication-exit-还是-form-close-有什么不同"}},[t._v("#")]),t._v(" 82. 在.net（C# or vb.net）中，Appplication.Exit 还是 Form.Close 有什么不同？")]),t._v(" "),a("p",[t._v("一个是退出整个应用程序，一个是关闭其中一个 form。")]),t._v(" "),a("h2",{attrs:{id:"_83-c-中-property-与-attribute-的区别-他们各有什么用处-这种机制的好处在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_83-c-中-property-与-attribute-的区别-他们各有什么用处-这种机制的好处在哪里"}},[t._v("#")]),t._v(" 83. C#中 property 与 attribute 的区别，他们各有什么用处，这种机制的好处在哪里？")]),t._v(" "),a("ul",[a("li",[t._v("attribute:自定义属性的基类;")]),t._v(" "),a("li",[t._v("property :类中的属性")])]),t._v(" "),a("h2",{attrs:{id:"_84-在-c-中-string-str-null-与-string-str-请尽量使用文字或图象说明其中的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_84-在-c-中-string-str-null-与-string-str-请尽量使用文字或图象说明其中的区别。"}},[t._v("#")]),t._v(' 84. 在 C＃中，string str = null 与 string str = "" 请尽量使用文字或图象说明其中的区别。')]),t._v(" "),a("ul",[a("li",[t._v("null 是没有空间引用的；")]),t._v(" "),a("li",[t._v('"" 是空间为 0 的字符串；')])]),t._v(" "),a("h2",{attrs:{id:"_85-abstract-class-和-interface-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_85-abstract-class-和-interface-有什么区别"}},[t._v("#")]),t._v(" 85. abstract class 和 interface 有什么区别?")]),t._v(" "),a("ul",[a("li",[t._v("声明方法的存在而不去实现它的类被叫做抽像类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建 abstract 类的实例。然而可以创建一个变量，其类型是一个抽像类，并让它指向具体子类的一个实例。不能有抽像构造函数或抽像静态方法。Abstract 类的子类为它们父类中的所有抽像方法提供实现，否则它们也是抽像类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。")]),t._v(" "),a("li",[t._v("接口（interface）是抽像类的变体。在接口中，所有方法都是抽像的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽像的，没有一个有程序体。接口只可以定义 static final 成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对像上调用接口的方法。由于有抽像类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。")])]),t._v(" "),a("h2",{attrs:{id:"_86-和-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_86-和-有什么区别"}},[t._v("#")]),t._v(" 86. <%# %> 和 <% %> 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("<%# %>表示绑定的数据源")]),t._v(" "),a("li",[t._v("<%%>是服务器端代码块")])]),t._v(" "),a("h2",{attrs:{id:"_87-重载与覆盖的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_87-重载与覆盖的区别"}},[t._v("#")]),t._v(" 87. 重载与覆盖的区别？")]),t._v(" "),a("ul",[a("li",[t._v("方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系")]),t._v(" "),a("li",[t._v("覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。")])]),t._v(" "),a("h2",{attrs:{id:"_88-overloaded-的方法是否可以改变返回值的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_88-overloaded-的方法是否可以改变返回值的类型"}},[t._v("#")]),t._v(" 88. Overloaded 的方法是否可以改变返回值的类型?")]),t._v(" "),a("p",[t._v("Overloaded 的方法是可以改变返回值的类型。")]),t._v(" "),a("h2",{attrs:{id:"_89-c-可否对内存进行直接的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_89-c-可否对内存进行直接的操作"}},[t._v("#")]),t._v(" 89. C#可否对内存进行直接的操作？")]),t._v(" "),a("p",[t._v("在.net 下，.net 引用了垃圾回收（GC）功能，它替代了程序员不过在 C#中。")]),t._v(" "),a("h2",{attrs:{id:"_90-请描述一下-net-中的委托-delegate-和事件-event-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_90-请描述一下-net-中的委托-delegate-和事件-event-。"}},[t._v("#")]),t._v(" 90. 请描述一下.NET 中的委托（Delegate）和事件（Event）。")]),t._v(" "),a("p",[t._v("委托是一种类型，用于引用和调用方法。它允许开发人员在运行时动态地绑定方法，并将其作为参数传递给其他方法。委托提供了一种解耦的方式，允许实现事件驱动的编程模型。事件是基于委托的机制，当特定条件发生时，可以触发事件并调用相应的事件处理程序。")]),t._v(" "),a("h2",{attrs:{id:"_91-什么是-linq-language-integrated-query-它在-net-中的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_91-什么是-linq-language-integrated-query-它在-net-中的作用是什么"}},[t._v("#")]),t._v(" 91. 什么是 LINQ（Language-Integrated Query）？它在.NET 中的作用是什么？")]),t._v(" "),a("p",[t._v("LINQ 是一种语言集成查询的技术，它提供了一种统一的方式来查询和操作不同类型的数据源，包括对象集合、数据库、XML 等。在.NET 中，LINQ 可以与 C#和其他.NET 语言一起使用，使开发人员能够使用类似于 SQL 的语法来查询和操作数据。")]),t._v(" "),a("h2",{attrs:{id:"_92-请解释一下-net-中的多态性和继承性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_92-请解释一下-net-中的多态性和继承性。"}},[t._v("#")]),t._v(" 92. 请解释一下.NET 中的多态性和继承性。")]),t._v(" "),a("p",[t._v("多态性是面向对象编程的一项重要特性，它允许以一种统一的方式处理不同类型的对象。在.NET 中，多态性通过继承和接口实现。继承性允许一个类继承另一个类的属性和方法，从而形成类之间的层次关系。通过基类引用指向派生类对象，可以实现多态性，调用派生类重写的方法。")]),t._v(" "),a("h2",{attrs:{id:"_93-请解释一下-net-中的-mvc-模式-model-view-controller-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_93-请解释一下-net-中的-mvc-模式-model-view-controller-。"}},[t._v("#")]),t._v(" 93. 请解释一下.NET 中的 MVC 模式（Model-View-Controller）。")]),t._v(" "),a("p",[t._v("MVC 模式是一种软件架构模式，用于将应用程序的逻辑分离成三个组件：模型（Model）、视图（View）和控制器（Controller）。模型负责处理数据逻辑，视图负责显示数据和用户界面，控制器负责接收用户输入并调度模型和视图之间的交互。")]),t._v(" "),a("h2",{attrs:{id:"_94-请解释一下-net-中的并发-concurrency-和多线程-multithreading-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_94-请解释一下-net-中的并发-concurrency-和多线程-multithreading-。"}},[t._v("#")]),t._v(" 94. 请解释一下.NET 中的并发（Concurrency）和多线程（Multithreading）。")]),t._v(" "),a("p",[t._v("并发是指多个任务在同一时间段内执行，而多线程是实现并发的一种方式。在.NET 中，多线程允许应用程序同时执行多个线程，每个线程独立执行。通过合理地管理线程，可以提高应用程序的性能和响应能力。")]),t._v(" "),a("h2",{attrs:{id:"_95-请解释一下-net-中的缓存-caching-和会话状态-session-state-管理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_95-请解释一下-net-中的缓存-caching-和会话状态-session-state-管理。"}},[t._v("#")]),t._v(" 95. 请解释一下.NET 中的缓存（Caching）和会话状态（Session State）管理。")]),t._v(" "),a("p",[t._v("缓存是一种用于临时存储数据的机制，在.NET 中可用于提高应用程序的性能和响应速度。通过将频繁访问的数据存储在缓存中，可以减少对数据库或其他外部资源的访问。会话状态管理是一种在 Web 应用程序中跟踪用户状态的机制，可以在不同页面之间存储和访问用户特定的数据。")]),t._v(" "),a("h2",{attrs:{id:"_96-请解释一下-net-中的安全性和角色授权机制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_96-请解释一下-net-中的安全性和角色授权机制。"}},[t._v("#")]),t._v(" 96. 请解释一下.NET 中的安全性和角色授权机制。")]),t._v(" "),a("p",[t._v(".NET 提供了多种安全性机制和角色授权机制来保护应用程序的安全性。安全性机制包括身份验证、授权、加密和防护等措施，用于保护应用程序和数据的安全。角色授权机制允许开发人员定义用户角色和权限，控制用户对应用程序的访问和操作。")]),t._v(" "),a("h2",{attrs:{id:"_97-请描述一下-net-中的部署和发布策略。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_97-请描述一下-net-中的部署和发布策略。"}},[t._v("#")]),t._v(" 97. 请描述一下.NET 中的部署和发布策略。")]),t._v(" "),a("p",[t._v("在.NET 中，应用程序的部署和发布涉及将应用程序及其依赖项部署到目标环境中的过程。发布策略包括选择适当的部署方式（例如 XCopy 部署、Web 部署、ClickOnce 部署等），配置应用程序的设置和参数，处理依赖项和版本控制，以及确保应用程序的稳定性和安全性。")]),t._v(" "),a("h2",{attrs:{id:"_98-c-中-哪些类型是值类型-哪些类型是引用类型-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_98-c-中-哪些类型是值类型-哪些类型是引用类型-数据类型"}},[t._v("#")]),t._v(" 98. C#中，哪些类型是值类型？哪些类型是引用类型？（数据类型）")]),t._v(" "),a("ul",[a("li",[t._v("引用类型包括：数组、委托、接口、object、字符串、用户定义的类。")]),t._v(" "),a("li",[t._v("值类型包括：数值类型、结构体、bool 型、枚举、可空类型、用户定义的结构体。")])]),t._v(" "),a("h2",{attrs:{id:"_99-值类型和引用类型的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_99-值类型和引用类型的区别"}},[t._v("#")]),t._v(" 99. 值类型和引用类型的区别？")]),t._v(" "),a("ul",[a("li",[t._v("值类型:占用空间固定、保存与复制的是值本身、使用 typeof 检测数据的类型、基本类型数据是值类型")]),t._v(" "),a("li",[t._v("引用类型:占用空间不固定、保存与复制的是指向对象的一个指针、使用 instanceof 检测数据类型、使用 new()方法构造出的对象是引用型")])]),t._v(" "),a("h2",{attrs:{id:"_100-string-和-stringbuilder-在字符串拼接的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_100-string-和-stringbuilder-在字符串拼接的区别"}},[t._v("#")]),t._v(" 100. String 和 StringBuilder 在字符串拼接的区别")]),t._v(" "),a("ol",[a("li",[t._v("String：string 是引用类型，存放在堆内存中，有“不可变性”的特性（驻留池机制），在做字符串拼接时，每次都会创建一个新对象，也就是每次都要去申请内存空间，因为做大量字符串拼接时性能很差，只适合做少量的字符串拼接。")]),t._v(" "),a("li",[t._v("StringBuilder：微软在 string 的基础上对 StringBuilder 做了优化，不会每次都去申请内存，而是一下子就申请一大块内存，做大量字符串拼接性能非常高。")])]),t._v(" "),a("h2",{attrs:{id:"_101-efcore-的左关联查询怎么实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_101-efcore-的左关联查询怎么实现"}},[t._v("#")]),t._v(" 101. EFCore 的左关联查询怎么实现")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var query = from b in context.Set<Blog>()\n            join p in context.Set<Post>()\n                on b.BlogId equals p.BlogId into grouping\n            from p in grouping.DefaultIfEmpty()\n            select new { b, p };\n")])])]),a("h2",{attrs:{id:"_102-efcore-怎么限定-model-的字段长度和类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_102-efcore-怎么限定-model-的字段长度和类型"}},[t._v("#")]),t._v(" 102. EFCore 怎么限定 Model 的字段长度和类型")]),t._v(" "),a("p",[t._v("使用 DataAnnotations 去添加特性，在迁移更新字段")]),t._v(" "),a("blockquote",[a("p",[t._v("使用DataAnnotations需要在Nuget中安装System.ComponentModel.Annotations包")])])])}),[],!1,null,null,null);a.default=r.exports}}]);